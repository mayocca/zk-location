{"noir_version":"0.34.0+359caafac5e489901d9ff02b08d1a688178d9b0a","hash":10536670982234316271,"abi":{"parameters":[{"name":"x1","type":{"kind":"field"},"visibility":"public"},{"name":"y1","type":{"kind":"field"},"visibility":"public"},{"name":"x2","type":{"kind":"field"},"visibility":"public"},{"name":"y2","type":{"kind":"field"},"visibility":"public"},{"name":"x","type":{"kind":"field"},"visibility":"private"},{"name":"y","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{}},"bytecode":"H4sIAAAAAAAA/+1di1YURxC9gKioqBExokbUiBpEndkHu4uoiBoREV8xxijiruyixp/LD+TbQmmX6cxs8GjfGrZP7HPcgpmmqMftutUzw9iHj+P9xr8/3deDTvYjP/qcnHMyCRspUVfSxdyv1Z1mD/ix2O7kDg3IgJNy4q/MsR2eEToGwozLGevrKifTlUq7Vmqn5bSZlBqtejWpVFvT9bSeVuvVtVK9XG7XK/Vao9WoJY2kUm6nnWqj3HG6tn+9rjSjK9kBm+T2k+PH9HnnJrrqtXarU6uUm0ml09rQM91pl5ulRtqplzfUlytpq9lO1iqt2nRlut6pJYMOQ33ID/ZC3MnTlfj2DlkaPGSgdxcRDFZ+7/ICTNLb1VZGARBbQxdsVi8zR7vBBb4WftF7HcWyaR/iY9M9Tg5rQDSAciLLpsOwZ1M/iKFsugc8oA4jDjZl+rwXcbLpXtiw6T5Lg/cZ6N2P3mZT8Xu/F2CSXhM2HXa2stmUmaPvYMOmordoNu1HfGx6wMkRDYgGUE5k2XQE9mzqBzGUTQ+AB9QRxMGmTJ8PIk42PQgbNh21NHjUQO8h9Dabit+HvACT9Jqw6Yizlc2mzBx9Dxs2Fb1Fs+kA4mPTw06OaUA0gHIiy6ZjsGdTP4ihbHoYPKCOIQ42Zfp8BHGy6RHYsOlRS4OPGug9ht5mU/H7mBdgkl4TNh1ztrLZlJmjH2DDpqK3aDbdhvjY9LiT4xoQDaCcyLLpOOzZ1A9iKJseBw+o44iDTZk+n0CcbHoCNmx60tLgkwZ6T6G32VT8PuUFmKTXhE3Hna1sNmXm6EfYsKnoLZpNBxEfm552ckIDogGUE1k2nYA9m/pBDGXT0+ABdQJxsCnT5zOIk03PwIZNz1oafNZA7zn0NpuK3+e8AJP0mrDphLOVzabMHP0EGzYVvUWzqdXFwFCs1TPf+7GYdPK8BkQDOIl/qp8ek0nXMkax2dQP4pey6esMm06CB9TzPB+TIkFp9fQUAu3cDJRTTl7QgCgAp5AHpUyyBuUweKCcAg+UF1AMKLMM0kOP9IVU3VL2QBfXabr9uF508pJ8+GC+iDzAZdL1jFHbIknIl9lV72T3QxeJPl4yAgp7cTB9Toh5VawyfG13Pg5h6CnwC/YkURezYKfgsjE7H6I0BX+Pz8QhM4ZFdmJWT94h0M7NOrGS4koDoqRUQp6oZJJ1J+YHMbQTK4G3sMuIE5RWf6qIQDs3A2XFyaoGRAFYQR6UMskalDvAA2UFPFBWUQwo2R0QEZQhVXfLtgfTTtbkwwfzNPIAl0nW2wOrhIRuD6aJPtaMgMJeHEyf68S8KlYZvmo7KgxdAb9gl4i6mAW7gTi7CKsHdxBo52ZdxIyTlzUgWlBnkC+yMsm6ixgHr4uYAQ+UlxEnKGNsbWedvKIBUQDOIg9KmRRTazsLHiivoBhQ9nJrG1B1t6y1verkB9z6YL6KPMBlUkyt7ddX8Hxre5Xo4zUjoLAXB9PnOWJeFasMX7W1FYaeBb9gzxB1MQv2dcTZRcTY2s47eUMDogV1HvkiK5Niam3nwQPlDWwNKLfwDyU+FfS0WquWmsUx/00nb2lAFIA3kQelTMoy/4BhEEPZ+ibRrlvk5JIrYmnO5YadjznYsE2orp/R253EvFtD7KI9T9TFXB+38a2T6GKuSSex4OQdDYgW6AXki7ZMiqmTWAAPlHfwvwPlll1DWHTyrgZEAbiIPChl0uc6iSRsUPf9i+CB8i4xAd+elNm8Ui45eU8DogBcQh6UMimmJ2WWwAPlPXyj7y7mmoBy2cn7GhAF4DLyoJRJMdH3MnigvI9iQNlPjmfAIje5qKCji+smrcADJx/Khw/mB8gDXCZ97nZCEjbMEhLaVjwg2vXQCCjs2wlMnx8RMaJYZfiqFwGEoZfBL9hLRF3Mgv0YXDZm50P2losG+Vgg6mJuNX4xzkcSNkqyfh+Df9HykRGmQ3U9gW29SsJGKhdVbxPXnfr9a2/jMJV18sTA76fozXro5+Up+PWQmO/0KdHf33o0H8pP8uRvwyAfzCeKG8R8PENv1wXByzODdWftdygORU+3m4lJ2EjniLqYNxN/J+dDB3vv9Iyo6zl6uxeRnDz3YsnMD3u9/Fcfm4SNlLm/ZfaxL9DbdVtw88IAO0Ve2bZ6UVxoTDa7sr3i5EsNiF7kW0H+wp9Msr6y7Qcx9Mr2CngL6CXiBGWM7y1adfKVBkQBuIo8KGVSTO8tWgUPlK9QDCjZXRHzNTkBVXfLbrc0nWzJhw/mJvIAl0mfu93SqwkJvd3SJPrYMgIKe3EwfX5NzKtileGrtuHC0KvgF+wVoi5mwV5DnF1EjK/kbDvZ0YBoQW0jX2RlUkyv5GyDB8oO4gRljPutdSffaEAUgOvIg1ImxbTfWgcPlG9QDCj7yfEMWOTMN89vWWv71sl38uGD+S3yAJdJ1k8SWSUktLV9S7TrnRFQ2K0t0+c/iBhRrDJ81dZWGHod/ILdJupiFuz34LIxOx+yFVoDv+Azt1jM7YFFDGXNvTeIIXMtM3Eo8VM+Up/l+0HvuMZZzg+gy9Af3Onk0Ma/Xd4PEv8rvpLo3m2j+8MbPnSo/bu7+JkNTPbrfm9ut/Pdjg13+T0jXY4NefKgp4MYh1R0j9ro/leM1f5Rzye/02L9TtGhwB3sEtNB77yP4T6+Lamn8lOT6A8/53rub6j6RQ+DkAAA","debug_symbols":"ldrfauJAFIDxd8l1LzJz5vwZX2VZirZaBNGidmGRvvu6u0ZKMo18d07iz5tvBsMhl+51vfp4e97uN4dTt/hx6XaHl+V5e9hfV5eu/3fp9L7c/12dzsvjuVukvjx16/3r9VOSz6dus92tu4XVz59PXaIgUyAUFAqUAqPAKQgKKg7XTp3rICTGImGRsRAsChaKhWHhWAQWlYrcbq73XWKT05qwyFgIFgULxcKwcCwCi0qFtJv7fZfEeJdIwiJjIVgULBQLw8KxCCwqFaXZPPdyEzmlsUhYZCwEi4KFYmFYOBaBRaVC282zDULKWCQsMhaCRcFCsTAsHIvAolJhzeaS9CYk61gkLDIWgkXBQrEwLByLwKJS4bi54+aOmztu7ri5N5uXuyh5fD7csHAsAotKRfRYJCwyFoJFwQI3D9w8cPPAzaPZXEu6CdV+JGqPRcIiYyFYFCwUC8PCsQgscPPU95wkTjIn7e46PI/q9XtjUjhRTowT5yQ4qZi0R3Lz5FH9BsmctOv7MHXQSBNSOFFOjBPnJDipmLSHc/OkXT/upE6mvu3x3DwRTgonyolx4pwEJxWT9phunvD6wusLry+8vjw6+w1inHzzr9/fSZmQ4KRiUnpOEifN+paHx1YrNiHCSeFEOTFOmvXNhvmKuU5IcFIxaY/u5kniJHMinBROlBPjhNdXXl95feP121M88xhI+IRkToSTwolyYpw4J8FJxaQ9zpsnvL7z+s7rO6/vj85+gxgj18XquN3ttm/PX191uV7+tTxul6vd+rbcfOxfvtw9/37/f+f6E38A","file_map":{"69":{"source":"fn main(x1: pub Field, y1: pub Field, x2: pub Field, y2: pub Field, x: Field, y: Field) {\n    let ix1 = x1 as i64;\n    let iy1 = y1 as i64;\n    let ix2 = x2 as i64;\n    let iy2 = y2 as i64;\n    let ix = x as i64;\n    let iy = y as i64;\n\n    // Assert that y1 <= y2 to ensure a valid rectangle vertically\n    assert(iy1 <= iy2);\n\n    // Check if the rectangle crosses the antimeridian\n    let crosses_antimeridian = ix1 > ix2;\n\n    // Assert that the private point (x, y) is within the rectangle\n    if crosses_antimeridian {\n        assert((ix >= ix1 & ix <= 360_000000) | (ix >= 0 & ix <= ix2));\n    } else {\n        assert(ix >= ix1 & ix <= ix2);\n    }\n    assert(iy >= iy1 & iy <= iy2);\n}\n\n#[test]\nfn test_point_inside_rectangle() {\n    main(100_000000, 50_000000, 200_000000, 100_000000, 150_000000, 75_000000);\n}\n\n#[test]\nfn test_point_on_edge() {\n    main(100_000000, 50_000000, 200_000000, 100_000000, 100_000000, 75_000000);\n}\n\n#[test(should_fail)]\nfn test_point_outside_rectangle() {\n    main(100_000000, 50_000000, 200_000000, 100_000000, 250_000000, 75_000000);\n}\n\n#[test]\nfn test_rectangle_crosses_antimeridian() {\n    main(355_000000, 50_000000, 12_000000, 100_000000, 359_000000, 75_000000);\n}\n\n#[test]\nfn test_point_inside_rectangle_after_antimeridian() {\n    main(355_000000, 50_000000, 12_000000, 100_000000, 5_000000, 75_000000);\n}\n\n#[test(should_fail)]\nfn test_point_outside_rectangle_with_antimeridian() {\n    main(355_000000, 50_000000, 12_000000, 100_000000, 200_000000, 75_000000);\n}\n","path":"/workspaces/zk-location-web/circuits/src/main.nr"}},"names":["main"],"brillig_names":["directive_integer_quotient","directive_invert"]}